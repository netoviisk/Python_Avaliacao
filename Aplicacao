import tkinter as tk
from tkinter import ttk
from tkinter import *
from cliente import get_city_id_by_name, update_treeview, fetch_data_cities
from usuario import *
import sqlite3
from usuario import Cidades
from banco import Banco
from usuario import Clientes

class MainApplication:
    def __init__(self, master=None):
        self.master = master
        self.master.title("Sistema de Gestão")
        self.master.geometry("1000x800")  # Define o tamanho da janela

        # Container para o menu principal
        self.menu_frame = Frame(master)
        self.menu_frame.pack(pady=20)

        self.create_widgets()

    def create_widgets(self):
        # Botão para abrir a tela de Usuários
        self.btn_usuarios = Button(self.menu_frame, text="Gerenciar Usuários", command=self.open_usuarios_screen, font=("Verdana", "12"))
        self.btn_usuarios.pack(pady=10)

        # Botão para abrir a tela de Cidades
        self.btn_cidades = Button(self.menu_frame, text="Gerenciar Cidades", command=self.open_cidades_screen, font=("Verdana", "12"))
        self.btn_cidades.pack(pady=10)

        # Botão para abrir a tela de Clientes
        self.btn_clientes = Button(self.menu_frame, text="Gerenciar Clientes", command=self.open_clientes_screen, font=("Verdana", "12"))
        self.btn_clientes.pack(pady=10)

        self.btn_sair = Button(self.menu_frame, text="Sair", command=self.master.quit, font=("Verdana", "12"))
        self.btn_sair.pack(pady=10)

    def open_usuarios_screen(self):
        self.new_window = tk.Toplevel(self.master)
        self.new_window.title("Gerenciar Usuários")
        self.new_window.geometry("2000x1000")
        ApplicationUsuarios(self.new_window)  # Substitua 'Application' pela sua classe de gerenciamento de usuários

    def open_cidades_screen(self):
        self.new_window = tk.Toplevel(self.master)
        self.new_window.title("Gerenciar Cidades")
        self.new_window.geometry("2000x1000")
        ApplicationCidades(self.new_window)  # Substitua 'ApplicationCidades' pela sua classe de gerenciamento de cidades

    def open_clientes_screen(self):
        self.new_window = tk.Toplevel(self.master)
        self.new_window.title("Gerenciar Clientes")
        self.new_window.geometry("2000x1000")
        ApplicationClientes(self.new_window)

class ApplicationUsuarios:
    def __init__(self, master=None):
        self.master = master
        self.fonte = ("Verdana", "8")

        self.container1 = Frame(master)
        self.container1["pady"] = 10
        self.container1.pack()

        self.container2 = Frame(master)
        self.container2["padx"] = 20
        self.container2["pady"] = 5
        self.container2.pack()

        self.container3 = Frame(master)
        self.container3["padx"] = 20
        self.container3["pady"] = 5
        self.container3.pack()

        self.container4 = Frame(master)
        self.container4["padx"] = 20
        self.container4["pady"] = 5
        self.container4.pack()

        self.container5 = Frame(master)
        self.container5["padx"] = 20
        self.container5["pady"] = 5
        self.container5.pack()

        self.container6 = Frame(master)
        self.container6["padx"] = 20
        self.container6["pady"] = 5
        self.container6.pack()

        self.container7 = Frame(master)
        self.container7["padx"] = 20
        self.container7["pady"] = 5
        self.container7.pack()

        self.container8 = Frame(master)
        self.container8["padx"] = 20
        self.container8["pady"] = 10
        self.container8.pack()

        self.container9 = Frame(master)
        self.container9["pady"] = 15
        self.container9.pack()

        self.container10 = Frame(master)
        self.container10["pady"] = 15
        self.container10.pack(fill=tk.BOTH, expand=True)

        self.titulo = Label(self.container1, text="Informe os dados:")
        self.titulo["font"] = ("Calibri", "9", "bold")
        self.titulo.pack()

        self.lblidusuario = Label(self.container2, text="idUsuario:", font=self.fonte, width=10)
        self.lblidusuario.pack(side=tk.LEFT)

        self.txtidusuario = Entry(self.container2)
        self.txtidusuario["width"] = 10
        self.txtidusuario["font"] = self.fonte
        self.txtidusuario.pack(side=tk.LEFT)

        self.btnBuscar = Button(self.container2, text="Buscar", font=self.fonte, width=10)
        self.btnBuscar["command"] = self.buscarUsuario
        self.btnBuscar.pack(side=tk.RIGHT)

        self.lblnome = Label(self.container3, text="Nome:", font=self.fonte, width=10)
        self.lblnome.pack(side=tk.LEFT)

        self.txtnome = Entry(self.container3)
        self.txtnome["width"] = 25
        self.txtnome["font"] = self.fonte
        self.txtnome.pack(side=tk.LEFT)

        self.lbltelefone = Label(self.container4, text="Telefone:", font=self.fonte, width=10)
        self.lbltelefone.pack(side=tk.LEFT)

        self.txttelefone = Entry(self.container4)
        self.txttelefone["width"] = 25
        self.txttelefone["font"] = self.fonte
        self.txttelefone.pack(side=tk.LEFT)

        self.lblemail = Label(self.container5, text="E-mail:", font=self.fonte, width=10)
        self.lblemail.pack(side=tk.LEFT)

        self.txtemail = Entry(self.container5)
        self.txtemail["width"] = 25
        self.txtemail["font"] = self.fonte
        self.txtemail.pack(side=tk.LEFT)

        self.lblusuario = Label(self.container6, text="Usuário:", font=self.fonte, width=10)
        self.lblusuario.pack(side=tk.LEFT)

        self.txtusuario = Entry(self.container6)
        self.txtusuario["width"] = 25
        self.txtusuario["font"] = self.fonte
        self.txtusuario.pack(side=tk.LEFT)

        self.lblsenha = Label(self.container7, text="Senha:", font=self.fonte, width=10)
        self.lblsenha.pack(side=tk.LEFT)

        self.txtsenha = Entry(self.container7)
        self.txtsenha["width"] = 25
        self.txtsenha["show"] = "*"
        self.txtsenha["font"] = self.fonte
        self.txtsenha.pack(side=tk.LEFT)

        self.bntInsert = Button(self.container8, text="Inserir", font=self.fonte, width=12)
        self.bntInsert["command"] = self.inserirUsuario
        self.bntInsert.pack(side=tk.LEFT)

        self.bntAlterar = Button(self.container8, text="Alterar", font=self.fonte, width=12)
        self.bntAlterar["command"] = self.alterarUsuario
        self.bntAlterar.pack(side=tk.LEFT)

        self.bntExcluir = Button(self.container8, text="Excluir", font=self.fonte, width=12)
        self.bntExcluir["command"] = self.excluirUsuario
        self.bntExcluir.pack(side=tk.LEFT)

        self.lblmsg = Label(self.container9, text="")
        self.lblmsg["font"] = ("Verdana", "9", "italic")
        self.lblmsg.pack()

        self.columns = ("ID", "Nome", "Telefone", "Email", "Usuario", "Senha")
        self.treeview = ttk.Treeview(self.container10, columns=self.columns, show='headings')
        for col in self.columns:
            self.treeview.heading(col, text=col)
        self.treeview.pack(fill=tk.BOTH, expand=True)

        self.treeview.bind("<ButtonRelease-1>", self.on_treeview_select)
        self.update_treeview()

        self.btn_sair = Button(master, text="Sair", command=master.destroy, font=("Verdana", "12"))
        self.btn_sair.pack(pady=10)

    def update_treeview(self):
        self.treeview.delete(*self.treeview.get_children())
        data = self.fetch_data()
        self.populate_treeview(data)

    def fetch_data(self):
        conn = sqlite3.connect('banco.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM usuarios")
        rows = cursor.fetchall()
        conn.close()
        return rows

    def populate_treeview(self, data):
        for row in data:
            self.treeview.insert("", "end", values=row)

    def on_treeview_select(self, event):
        selected_item = self.treeview.selection()
        if not selected_item:
            return
        item_values = self.treeview.item(selected_item)["values"]
        if item_values:
            self.txtidusuario.delete(0, tk.END)
            self.txtidusuario.insert(0, item_values[0])
            self.txtnome.delete(0, tk.END)
            self.txtnome.insert(0, item_values[1])
            self.txttelefone.delete(0, tk.END)
            self.txttelefone.insert(0, item_values[2])
            self.txtemail.delete(0, tk.END)
            self.txtemail.insert(0, item_values[3])
            self.txtusuario.delete(0, tk.END)
            self.txtusuario.insert(0, item_values[4])
            self.txtsenha.delete(0, tk.END)
            self.txtsenha.insert(0, item_values[5])

    def inserirUsuario(self):
        user = Usuarios()
        user.nome = self.txtnome.get()
        user.telefone = self.txttelefone.get()
        user.email = self.txtemail.get()
        user.usuario = self.txtusuario.get()
        user.senha = self.txtsenha.get()
        self.lblmsg["text"] = user.insertUser()
        self.clear_entries()
        self.update_treeview()

    def alterarUsuario(self):
        user = Usuarios()
        user.idUsuario = self.txtidusuario.get()
        user.nome = self.txtnome.get()
        user.telefone = self.txttelefone.get()
        user.email = self.txtemail.get()
        user.usuario = self.txtusuario.get()
        user.senha = self.txtsenha.get()
        self.lblmsg["text"] = user.updateUser()
        self.clear_entries()
        self.update_treeview()

    def excluirUsuario(self):
        user = Usuarios()
        user.idUsuario = self.txtidusuario.get()
        self.lblmsg["text"] = user.deleteUser()
        self.clear_entries()
        self.update_treeview()

    def buscarUsuario(self):
        user = Usuarios()
        user.idUsuario = self.txtidusuario.get()
        result = user.searchUser()
        if result:
            self.txtnome.delete(0, tk.END)
            self.txtnome.insert(0, result[1])
            self.txttelefone.delete(0, tk.END)
            self.txttelefone.insert(0, result[2])
            self.txtemail.delete(0, tk.END)
            self.txtemail.insert(0, result[3])
            self.txtusuario.delete(0, tk.END)
            self.txtusuario.insert(0, result[4])
            self.txtsenha.delete(0, tk.END)
            self.txtsenha.insert(0, result[5])
        else:
            self.lblmsg["text"] = "Usuário não encontrado"

    def clear_entries(self):
        self.txtidusuario.delete(0, tk.END)
        self.txtnome.delete(0, tk.END)
        self.txttelefone.delete(0, tk.END)
        self.txtemail.delete(0, tk.END)
        self.txtusuario.delete(0, tk.END)
        self.txtsenha.delete(0, tk.END)

class ApplicationCidades:
    def __init__(self, master=None):
        self.master = master
        self.fonte = ("Verdana", "8")

        # Containers para o formulário
        self.container1 = Frame(master)
        self.container1["pady"] = 10
        self.container1.pack()

        self.container2 = Frame(master)
        self.container2["padx"] = 20
        self.container2["pady"] = 5
        self.container2.pack()

        self.container3 = Frame(master)
        self.container3["padx"] = 20
        self.container3["pady"] = 5
        self.container3.pack()

        self.container4 = Frame(master)
        self.container4["padx"] = 20
        self.container4["pady"] = 5
        self.container4.pack()

        self.container5 = Frame(master)
        self.container5["padx"] = 20
        self.container5["pady"] = 10
        self.container5.pack()

        self.container6 = Frame(master)
        self.container6["pady"] = 15
        self.container6.pack()

        self.container7 = Frame(master)
        self.container7["pady"] = 15
        self.container7.pack(fill=tk.BOTH, expand=True)

        # Formulário de entrada de dados
        self.titulo = Label(self.container1, text="Informe os dados da cidade:")
        self.titulo["font"] = ("Calibri", "9", "bold")
        self.titulo.pack()

        self.lblidcidade = Label(self.container2, text="idCidade:", font=self.fonte, width=10)
        self.lblidcidade.pack(side=tk.LEFT)

        self.txtidcidade = Entry(self.container2)
        self.txtidcidade["width"] = 10
        self.txtidcidade["font"] = self.fonte
        self.txtidcidade.pack(side=tk.LEFT)

        self.btnBuscar = Button(self.container2, text="Buscar", font=self.fonte, width=10)
        self.btnBuscar["command"] = self.buscarCidade
        self.btnBuscar.pack(side=tk.RIGHT)

        self.lblnomecid = Label(self.container3, text="Nome:", font=self.fonte, width=10)
        self.lblnomecid.pack(side=tk.LEFT)

        self.txtnomecid = Entry(self.container3)
        self.txtnomecid["width"] = 25
        self.txtnomecid["font"] = self.fonte
        self.txtnomecid.pack(side=tk.LEFT)

        self.lblcep = Label(self.container4, text="CEP:", font=self.fonte, width=10)
        self.lblcep.pack(side=tk.LEFT)

        self.txtcep = Entry(self.container4)
        self.txtcep["width"] = 25
        self.txtcep["font"] = self.fonte
        self.txtcep.pack(side=tk.LEFT)

        self.lblUF = Label(self.container5, text="UF:", font=self.fonte, width=10)
        self.lblUF.pack(side=tk.LEFT)

        self.txtUF = Entry(self.container5)
        self.txtUF["width"] = 25
        self.txtUF["font"] = self.fonte
        self.txtUF.pack(side=tk.LEFT)

        self.bntInsert = Button(self.container6, text="Inserir", font=self.fonte, width=12)
        self.bntInsert["command"] = self.inserirCidade
        self.bntInsert.pack(side=tk.LEFT)

        self.bntAlterar = Button(self.container6, text="Alterar", font=self.fonte, width=12)
        self.bntAlterar["command"] = self.alterarCidade
        self.bntAlterar.pack(side=tk.LEFT)

        self.bntExcluir = Button(self.container6, text="Excluir", font=self.fonte, width=12)
        self.bntExcluir["command"] = self.excluirCidade
        self.bntExcluir.pack(side=tk.LEFT)

        self.lblmsg = Label(self.container6, text="")
        self.lblmsg["font"] = ("Verdana", "9", "italic")
        self.lblmsg.pack()

        # Configurando a Treeview para exibir os dados
        self.columns = ("ID", "Nome", "CEP", "UF")
        self.treeview = ttk.Treeview(self.container7, columns=self.columns, show='headings')
        for col in self.columns:
            self.treeview.heading(col, text=col)
        self.treeview.pack(fill=tk.BOTH, expand=True)

        # Botão de Sair
        self.btnSair = Button(self.container7, text="Sair", font=self.fonte, width=12, command=self.sairAplicacao)
        self.btnSair.pack(side=tk.BOTTOM, pady=10)

        # Adiciona o evento de seleção à Treeview
        self.treeview.bind("<<TreeviewSelect>>", self.on_treeview_select)

        # Preenchendo a Treeview com dados do banco ao iniciar
        self.update_treeview()

    def update_treeview(self):
        self.treeview.delete(*self.treeview.get_children())  # Limpa todos os dados existentes
        data = self.fetch_data()  # Busca os dados atualizados
        self.populate_treeview(data)  # Reinsere os dados

    def fetch_data(self):
        conn = sqlite3.connect('banco.db')  # Conectando ao banco de dados
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM cidades")
        rows = cursor.fetchall()  # Buscando todos os resultados
        conn.close()

        return rows

    def populate_treeview(self, data):
        for row in data:
            self.treeview.insert("", "end", values=row)

    def inserirCidade(self):
        cidade = Cidades()
        cidade.nomecid = self.txtnomecid.get()
        cidade.cep = self.txtcep.get()
        cidade.UF = self.txtUF.get()

        self.lblmsg["text"] = cidade.insertCidade()

        self.txtidcidade.delete(0, END)
        self.txtnomecid.delete(0, END)
        self.txtcep.delete(0, END)
        self.txtUF.delete(0, END)

        self.update_treeview()  # Atualiza a Treeview após inserir

    def alterarCidade(self):
        cidade = Cidades()
        cidade.idcidade = self.txtidcidade.get()
        cidade.nomecid = self.txtnomecid.get()
        cidade.cep = self.txtcep.get()
        cidade.UF = self.txtUF.get()

        self.lblmsg["text"] = cidade.updateCidade()

        self.txtidcidade.delete(0, END)
        self.txtnomecid.delete(0, END)
        self.txtcep.delete(0, END)
        self.txtUF.delete(0, END)

        self.update_treeview()  # Atualiza a Treeview após alterar

    def excluirCidade(self):
        cidade = Cidades()
        cidade.idcidade = self.txtidcidade.get()

        self.lblmsg["text"] = cidade.deleteCidade()

        self.txtidcidade.delete(0, END)
        self.txtnomecid.delete(0, END)
        self.txtcep.delete(0, END)
        self.txtUF.delete(0, END)

        self.update_treeview()  # Atualiza a Treeview após excluir

    def buscarCidade(self):
        cidade = Cidades()
        idcidade = self.txtidcidade.get()

        self.lblmsg["text"] = cidade.selectCidade(idcidade)

        # Preencher os campos com os dados da cidade encontrada
        self.txtidcidade.delete(0, END)
        self.txtidcidade.insert(INSERT, cidade.idcidade)
        self.txtnomecid.delete(0, END)
        self.txtnomecid.insert(INSERT, cidade.nomecid)
        self.txtcep.delete(0, END)
        self.txtcep.insert(INSERT, cidade.cep)
        self.txtUF.delete(0, END)
        self.txtUF.insert(INSERT, cidade.UF)

        self.update_treeview()  # Atualiza a Treeview após buscar

    def sairAplicacao(self):
        self.master.destroy()

    def on_treeview_select(self, event):
        selected_item = self.treeview.selection()  # Obtém o item selecionado
        if selected_item:
            item = self.treeview.item(selected_item)  # Obtém os dados do item selecionado
            cidade_data = item['values']  # Os valores são uma lista com os dados da linha
            self.txtidcidade.delete(0, END)
            self.txtidcidade.insert(INSERT, cidade_data[0])
            self.txtnomecid.delete(0, END)
            self.txtnomecid.insert(INSERT, cidade_data[1])
            self.txtcep.delete(0, END)
            self.txtcep.insert(INSERT, cidade_data[2])
            self.txtUF.delete(0, END)
            self.txtUF.insert(INSERT, cidade_data[3])

class ApplicationClientes:
    def __init__(self, master=None):
        self.master = master
        self.master.title("Sistema de Gestão de Clientes")

        # Configuração do formulário
        self.fonte = ("Verdana", "8")
        self.container1 = Frame(master)
        self.container1["pady"] = 10
        self.container1.pack()

        self.container2 = Frame(master)
        self.container2["padx"] = 20
        self.container2["pady"] = 5
        self.container2.pack()

        self.container3 = Frame(master)
        self.container3["padx"] = 20
        self.container3["pady"] = 5
        self.container3.pack()

        self.container4 = Frame(master)
        self.container4["padx"] = 20
        self.container4["pady"] = 5
        self.container4.pack()

        self.container5 = Frame(master)
        self.container5["padx"] = 20
        self.container5["pady"] = 10
        self.container5.pack()

        self.container6 = Frame(master)
        self.container6["pady"] = 15
        self.container6.pack()

        self.container7 = Frame(master)
        self.container7["pady"] = 15
        self.container7.pack()

        self.container8 = Frame(master)
        self.container8["pady"] = 10
        self.container8.pack(fill=tk.BOTH, expand=True)

        self.titulo = Label(self.container1, text="Informe os dados do cliente:")
        self.titulo["font"] = ("Calibri", "9", "bold")
        self.titulo.pack()

        self.lblidcliente = Label(self.container2, text="ID Cliente:", font=self.fonte, width=10)
        self.lblidcliente.pack(side=tk.LEFT)

        self.txtidcliente = Entry(self.container2)
        self.txtidcliente["width"] = 10
        self.txtidcliente["font"] = self.fonte
        self.txtidcliente.pack(side=tk.LEFT)

        self.btnBuscar = Button(self.container2, text="Buscar", font=self.fonte, width=10)
        self.btnBuscar["command"] = self.buscarCliente
        self.btnBuscar.pack(side=tk.RIGHT)

        self.lblnomecli = Label(self.container3, text="Nome:", font=self.fonte, width=10)
        self.lblnomecli.pack(side=tk.LEFT)

        self.txtnomecli = Entry(self.container3)
        self.txtnomecli["width"] = 25
        self.txtnomecli["font"] = self.fonte
        self.txtnomecli.pack(side=tk.LEFT)

        self.lblcpf = Label(self.container4, text="CPF:", font=self.fonte, width=10)
        self.lblcpf.pack(side=tk.LEFT)

        self.txtcpf = Entry(self.container4)
        self.txtcpf["width"] = 25
        self.txtcpf["font"] = self.fonte
        self.txtcpf.pack(side=tk.LEFT)

        self.lbldata_nascimento = Label(self.container5, text="Nascimento:", font=self.fonte, width=15)
        self.lbldata_nascimento.pack(side=tk.LEFT)

        self.txtdata_nascimento = Entry(self.container5)
        self.txtdata_nascimento["width"] = 25
        self.txtdata_nascimento["font"] = self.fonte
        self.txtdata_nascimento.pack(side=tk.LEFT)

        self.lblgenero = Label(self.container6, text="Gênero:", font=self.fonte, width=10)
        self.lblgenero.pack(side=tk.LEFT)

        self.combogenero = ttk.Combobox(self.container6, values=["Masculino", "Feminino"], font=self.fonte, width=23)
        self.combogenero.pack(side=tk.LEFT)
        self.combogenero.current(0)  # Define a opção padrão como "Masculino"

        self.lblcidade = Label(self.container7, text="Cidade:", font=self.fonte, width=10)
        self.lblcidade.pack(side=tk.LEFT)

        self.combocidade = ttk.Combobox(self.container7, values=[], font=self.fonte, width=23)
        self.combocidade.pack(side=tk.LEFT)

        self.bntInsert = Button(self.container7, text="Inserir", font=self.fonte, width=12)
        self.bntInsert["command"] = self.inserirCliente
        self.bntInsert.pack(side=tk.LEFT)

        self.bntAlterar = Button(self.container7, text="Alterar", font=self.fonte, width=12)
        self.bntAlterar["command"] = self.alterarCliente
        self.bntAlterar.pack(side=tk.LEFT)

        self.bntExcluir = Button(self.container7, text="Excluir", font=self.fonte, width=12)
        self.bntExcluir["command"] = self.excluirCliente
        self.bntExcluir.pack(side=tk.LEFT)

        self.lblmsg = Label(self.container7, text="")
        self.lblmsg["font"] = ("Verdana", "9", "italic")
        self.lblmsg.pack()

        # Configuração da Treeview (Tabela)
        self.columns = ("ID", "Nome", "CPF", "Data de nascimento", "Gênero", "Cidade")
        self.treeview = ttk.Treeview(self.container8, columns=self.columns, show='headings')
        for col in self.columns:
            self.treeview.heading(col, text=col)
        self.treeview.pack(fill=tk.BOTH, expand=True)

        self.treeview.bind("<ButtonRelease-1>", self.on_treeview_select)

        # Botão de Sair
        self.btnSair = Button(self.container8, text="Sair", font=self.fonte, width=12, command=self.sairAplicacao)
        self.btnSair.pack(side=tk.BOTTOM, pady=10)

        self.update_treeview()
        self.populate_combobox_cidades(self.combocidade)

    def fetch_data_clients(self):
        banco = Banco()
        try:
            c = banco.conexao.cursor()
            c.execute("SELECT * FROM clientes")
            rows = c.fetchall()
            c.close()
            return rows
        except Exception as e:
            print(f"Erro ao buscar clientes: {e}")
            return []

    def fetch_data_cities(self):
        banco = Banco()
        try:
            c = banco.conexao.cursor()
            c.execute("SELECT idcidade, nomecid FROM cidades")
            rows = c.fetchall()
            c.close()
            return rows
        except Exception as e:
            print(f"Erro ao buscar cidades: {e}")
            return []

    def populate_treeview(self, data):
        for row in data:
            self.treeview.insert("", "end", values=row)

    def update_treeview(self):
        self.treeview.delete(*self.treeview.get_children())
        data = self.fetch_data_clients()
        self.populate_treeview(data)

    def populate_combobox_cidades(self, combobox):
        cidades = self.fetch_data_cities()
        combobox["values"] = [cidade[1] for cidade in cidades]

    def get_city_id_by_name(self, city_name):
        cidades = self.fetch_data_cities()
        for cid in cidades:
            if cid[1] == city_name:
                return cid[0]
        return None

    def on_treeview_select(self, event):
        selected_item = self.treeview.selection()
        if not selected_item:
            return
        item_values = self.treeview.item(selected_item)["values"]
        if item_values:
            self.txtidcliente.delete(0, tk.END)
            self.txtidcliente.insert(0, item_values[0])
            self.txtnomecli.delete(0, tk.END)
            self.txtnomecli.insert(0, item_values[1])
            self.txtcpf.delete(0, tk.END)
            self.txtcpf.insert(0, item_values[2])
            self.txtdata_nascimento.delete(0, tk.END)
            self.txtdata_nascimento.insert(0, item_values[3])
            self.combogenero.set(item_values[4])
            cidade_id = item_values[5]
            cidades = self.fetch_data_cities()
            for cid in cidades:
                if cid[0] == cidade_id:
                    self.combocidade.set(cid[1])
                    break

    def inserirCliente(self):
        cliente = Clientes()
        cliente.nomecli = self.txtnomecli.get()
        cliente.cpf = self.txtcpf.get()
        cliente.data_nascimento = self.txtdata_nascimento.get()
        cliente.genero = self.combogenero.get()

        cidade_selecionada = self.combocidade.get()
        cidade_id = self.get_city_id_by_name(cidade_selecionada)
        cliente.idcidade = cidade_id

        self.lblmsg["text"] = cliente.insertCliente()

        self.txtidcliente.delete(0, END)
        self.txtnomecli.delete(0, END)
        self.txtcpf.delete(0, END)
        self.txtdata_nascimento.delete(0, END)
        self.combogenero.set('')
        self.combocidade.set('')

        self.update_treeview()

    def alterarCliente(self):
        cliente = Clientes()
        cliente.idcliente = self.txtidcliente.get()
        cliente.nomecli = self.txtnomecli.get()
        cliente.cpf = self.txtcpf.get()
        cliente.data_nascimento = self.txtdata_nascimento.get()
        cliente.genero = self.combogenero.get()

        cidade_selecionada = self.combocidade.get()
        cidade_id = self.get_city_id_by_name(cidade_selecionada)
        cliente.idcidade = cidade_id

        self.lblmsg["text"] = cliente.updateCliente()

        self.txtidcliente.delete(0, END)
        self.txtnomecli.delete(0, END)
        self.txtcpf.delete(0, END)
        self.txtdata_nascimento.delete(0, END)
        self.combogenero.set('')
        self.combocidade.set('')

        self.update_treeview()

    def excluirCliente(self):
        cliente = Clientes()
        cliente.idcliente = self.txtidcliente.get()

        self.lblmsg["text"] = cliente.deleteCliente()

        self.txtidcliente.delete(0, END)
        self.txtnomecli.delete(0, END)
        self.txtcpf.delete(0, END)
        self.txtdata_nascimento.delete(0, END)
        self.combogenero.set('')
        self.combocidade.set('')

        self.update_treeview()

    def buscarCliente(self):
        cliente = Clientes()
        idcliente = self.txtidcliente.get()

        self.lblmsg["text"] = cliente.selectCliente(idcliente)

        self.txtidcliente.delete(0, END)
        self.txtidcliente.insert(INSERT, cliente.idcliente)
        self.txtnomecli.delete(0, END)
        self.txtnomecli.insert(INSERT, cliente.nomecli)
        self.txtcpf.delete(0, END)
        self.txtcpf.insert(INSERT, cliente.cpf)
        self.txtdata_nascimento.delete(0, END)
        self.txtdata_nascimento.insert(INSERT, cliente.data_nascimento)
        self.combogenero.set(cliente.genero)

        cidade_id = cliente.idcidade
        cidades = self.fetch_data_cities()
        for cid in cidades:
            if cid[0] == cidade_id:
                self.combocidade.set(cid[1])
                break

    def sairAplicacao(self):
        self.master.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    root.attributes('-fullscreen', True)
    app = MainApplication(root)
    root.mainloop()
